{"version":3,"file":"js/react/250.js","mappings":"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","sources":["webpack:///./resources/js/react/TimeLogTable/components/EmployeeSessionTable.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./data-table.css\";\r\nimport TableFooter from \"./TableFooter\";\r\nimport TaskWiseTimeLogTableLoader from \"./TaskWiseTableLoader\";\r\nimport TableDragAbleHeader from \"./DragHeader\";\r\n\r\n\r\n\r\nconst DataTable = ({\r\n    data,\r\n    columns = [],\r\n    tableName = \"data-table\",\r\n    sortBy = \"\",\r\n    height = \"calc(100vh - 100px)\",\r\n    onPaginate,\r\n    perpageData,\r\n    handlePerPageData,\r\n    totalEntry,\r\n    currentPage,\r\n    isLoading,\r\n}) => {\r\n    const [columnOrder, setColumnOrder] = useState([]);\r\n\r\n    // get columns keys\r\n    useEffect(() => {\r\n        const column_ids = _.map(columns, \"id\");\r\n        setColumnOrder([...column_ids]);\r\n    }, []);\r\n\r\n    const _columns = _.sortBy(columns, (item) =>\r\n        _.indexOf(columnOrder, item.id)\r\n    );\r\n\r\n\r\n    // render row\r\n    const renderRow = (data) => {\r\n        const rows = [];\r\n        if (data) {\r\n            for (const [key, value] of data) {\r\n                {\r\n                    value?.map((item, index) => {\r\n                        const className =\r\n                            value.length === index + 1\r\n                                ? \"sp1_tlr_td f-14 sp1_tlr_td_border\"\r\n                                : \"sp1_tlr_td f-14\"; \r\n                        rows.push(\r\n                            <React.Fragment key={item.start_time}>\r\n                                <tr className=\"sp1_tlr_tr\">\r\n                                    {\r\n                                        _.map(_columns, col =>{\r\n                                            if(col.group){\r\n                                                return index === 0 && (\r\n                                                    <React.Fragment key={col.id}>\r\n                                                        {col.cell({row: item, data: value, rowSpan: _.size(value)})}\r\n                                                    </React.Fragment>\r\n                                                );\r\n                                            }else{\r\n                                                    return <React.Fragment key={col.id}>\r\n                                                        { col.cell({ row: item, data: value, index,  className: `${className} sp1_drag_col_${col?.id}`})}\r\n                                                    </React.Fragment>\r\n                                                }\r\n                                            }\r\n                                        )\r\n                                    }\r\n                                </tr>\r\n                            </React.Fragment>\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return rows;\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"p-3\">\r\n                <div\r\n                    className=\"position-relative sp1_tlr_tbl_wrapper\"\r\n                    style={{ height }}\r\n                >\r\n                    <table className=\"sp1_tlr_table\">\r\n                        <thead className=\"sp1_tlr_thead\">\r\n                            <tr className=\"sp1_tlr_tr\">\r\n                                {_.map(_columns, (column) => {\r\n                                    return (\r\n                                        <TableDragAbleHeader\r\n                                            key={column.id}\r\n                                            className=\"sp1_tlr_th\"\r\n                                            column={column}\r\n                                            columns = {_columns}\r\n                                            onSort={() => {}}\r\n                                            onDrop={setColumnOrder}\r\n                                            order={columnOrder}\r\n                                            tableName={tableName}\r\n                                        /> \r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"sp1_tlr_tbody\">\r\n                            {!isLoading && renderRow(data)}\r\n                            {isLoading && <TaskWiseTimeLogTableLoader />}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <TableFooter\r\n                    onPaginate={onPaginate}\r\n                    perpageData={perpageData}\r\n                    totalEntry={totalEntry}\r\n                    currentPage={currentPage}\r\n                    handlePerPageData={handlePerPageData}\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default DataTable;\r\n"],"names":["_ref","data","_ref$columns","columns","_ref$tableName","tableName","_ref$height","sortBy","height","onPaginate","perpageData","handlePerPageData","totalEntry","currentPage","isLoading","_useState2","_slicedToArray","useState","columnOrder","setColumnOrder","useEffect","column_ids","_","map","_toConsumableArray","_columns","item","indexOf","id","_jsx","React","children","_jsxs","className","style","column","TableDragAbleHeader","onSort","onDrop","order","rows","_step","_iterator","_createForOfIteratorHelper","_loop","_step$value","value","index","length","push","col","group","cell","row","rowSpan","size","concat","start_time","s","n","done","err","e","f","renderRow","TaskWiseTimeLogTableLoader","TableFooter"],"sourceRoot":""}