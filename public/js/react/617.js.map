{"version":3,"file":"js/react/617.js","mappings":"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","sources":["webpack:///./resources/js/react/tasks/components/SubtaskTable.jsx","webpack:///./resources/js/react/tasks/pages/Subtasks.jsx"],"sourcesContent":["import * as React from 'react';\r\nimport { convertTime } from '../../utils/converTime';\r\nimport { CompareDate } from '../../utils/dateController';\r\nconst compareDate = new CompareDate(); \r\n\r\nimport {\r\n  useReactTable, getCoreRowModel,\r\n  getPaginationRowModel,\r\n  getFilteredRowModel,\r\n  getExpandedRowModel,\r\n  getSortedRowModel,\r\n  flexRender\r\n} from '@tanstack/react-table';\r\n\r\nimport _ from 'lodash';\r\nimport TasksTablePagination from './TasksTablePagination';\r\nimport dayjs from 'dayjs';\r\nimport TaskTableLoader from './loader/TaskTableLoader';\r\nimport { useSelector } from 'react-redux';\r\nimport Dropdown from './Dropdown';\r\nimport Button from './Button';\r\nimport StopWatch from './Timer';\r\nimport EmptyTable from '../../global/EmptyTable';\r\nimport Person from './Person';\r\nimport { DragableColumnHeader } from './table/DragableColumnHeader';\r\nimport ReportButton from './ReportButton';\r\nimport { User } from '../../utils/user-details';\r\n\r\n\r\nexport default function SubTasksTable({isLoading, filter, tableName,search, reportPermission}){\r\n  const { subtasks } = useSelector(s => s.tasks);\r\n  const [data, setData] = React.useState([])\r\n  const [expanded, setExpanded] = React.useState({}); \r\n  const [sorting, setSorting] = React.useState([]);\r\n  const [{pageIndex, pageSize}, setPagination] = React.useState({pageIndex: 0, pageSize: 10}); \r\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\r\n  const [ globalFilter, setGlobalFilter ] = React.useState('');\r\n\r\n  const _tasks = React.useMemo(()=> subtasks, [subtasks]);\r\n\r\n  React.useEffect(() => {\r\n    if(_.size(_tasks) === _.size(data)){\r\n      setSkipPageReset(true);\r\n      _tasks && setData(_tasks) \r\n    }else{\r\n      _tasks && setData(_tasks);\r\n    }\r\n  }, [_tasks])\r\n\r\n  // clear skipPageReset \r\n  React.useEffect(() => {\r\n    if(skipPageReset){ \r\n      setSkipPageReset(false);\r\n    }\r\n  }, [data])\r\n    \r\n\r\n  // column\r\n  const defaultColumns = React.useMemo(() => [\r\n    {\r\n      id: 'task',\r\n      header: 'Task',\r\n      accessorFn: (row) => `${row.id}${row.heading}`,\r\n      cell: ({row}) => {\r\n        const data = row?.original;  \r\n        return (\r\n          <abbr title={data?.heading} style={{textDecoration: 'none'}}>\r\n            <div className='d-flex align-items-center' style={{gap: '10px'}}>\r\n                <a href={`/account/tasks/${data?.id}`} className='hover-underline multine-ellipsis'> {data?.heading} </a>\r\n            </div>\r\n          </abbr>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      id: 'timer_status',\r\n      header: 'Timer Status',\r\n      accessorKey: 'subtasks_timer_active',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        const count = data?.subtasks_timer_active;\r\n        const subtaskCount = _.size(data?.subtasks_count)\r\n        const isActive = count > 0;\r\n        let serverTime = 0;\r\n        let localTime = 0;\r\n        let timer = 0;\r\n\r\n         if(data?.start_time && _.isNull(data?.end_time)){\r\n            serverTime =compareDate.dayjs(data?.start_time).unix();\r\n            localTime = compareDate.dayjs().unix();\r\n            timer = localTime - serverTime;\r\n         }\r\n\r\n         const clockIsRunning = data?.start_time && _.isNull(data?.end_time)\r\n         \r\n        const color = (isActive || clockIsRunning) ? '#54B688' : '#DCDEE1'\r\n        return(\r\n          <div style={{color}} className='d-flex align-items-center'>\r\n            <i className=\"fa-solid fa-stopwatch f-18\"/>\r\n            {row.parentId === undefined && subtaskCount === 0 && !clockIsRunning && <span className='ml-2'><strong>{count}</strong></span>}\r\n            {clockIsRunning && \r\n              <span className='ml-1 badge badge-primary text-white' style={{fontSize: '11px'}}>\r\n                {<StopWatch time={timer} run={clockIsRunning} />}\r\n              </span>\r\n            }\r\n          </div>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'milestone',\r\n      header: 'Milestone',\r\n      accessorKey: 'milestone_title',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <abbr title={data?.milestone_title} style={{textDecoration: 'none'}}>\r\n            <span className='multine-ellipsis word-break'>\r\n              {data?.milestone_title}\r\n            </span>\r\n          </abbr>\r\n        )\r\n      }\r\n    },\r\n    {\r\n      id: 'deliverable',\r\n      header: 'Deliverable',\r\n      accessorKey: 'deliverable_title',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <abbr title={data?.deliverable_title} style={{textDecoration: 'none'}}>\r\n            <span className='multine-ellipsis word-break'>\r\n              {data?.deliverable_title ?? '--'}\r\n            </span>\r\n          </abbr>\r\n          \r\n        )\r\n      }\r\n    },\r\n    {\r\n      id: 'project',\r\n      header: 'Project',\r\n      accessorFn: row => `${row?.project_id}${project_name}`,\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <abbr title={data?.project_name} style={{textDecoration: 'none'}}>\r\n            <a href={`/account/projects/${data?.project_id}`} className='multine-ellipsis'>\r\n              {data?.project_name}\r\n            </a>\r\n          </abbr>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'client',\r\n      header: 'Client',\r\n      accessorKey: 'client_name',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <div>\r\n            <Person\r\n              url={`/account/clients/${data?.client_id}`}\r\n              avatar={data?.client_avatar}\r\n              name={data?.client_name}\r\n            /> \r\n          </div>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'project_manager',\r\n      header: 'Project Manager',\r\n      accessorKey: 'pm_id_name',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <Person\r\n            url={`/account/employees/${data?.project_manager_id}`}\r\n            name={data?.pm_id_name}\r\n            avatar={data?.pm_id_avatar}\r\n          /> \r\n        )\r\n      }\r\n    },\r\n    \r\n    {\r\n      id: 'creation_date',\r\n      header: 'Creation Date',\r\n      accessorKey: 'creation_date',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <span>\r\n            { data?.creation_date}\r\n          </span>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'due_date',\r\n      header: 'Due Date',\r\n      accessorKey: \"due_date\",\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        let date = data?.due_date;\r\n        const currentDate = compareDate.dayjs();\r\n        let color = ''\r\n\r\n        if(compareDate.isSame(currentDate, date)){\r\n          date = 'Today';\r\n          color= 'red';\r\n        }else if(compareDate.isAfter(currentDate, date)){\r\n          color= 'red'\r\n        }\r\n        \r\n        date = date === 'Today' ? date : dayjs(date).format('DD-MM-YYYY');\r\n        return(\r\n          <span style={{color: color}}>\r\n           <strong>{date ?? '--'}</strong> \r\n          </span>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'start_date',\r\n      header: 'Started Date',\r\n      accessorKey: 'start_date',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <strong>\r\n            {data?.start_date ? (\r\n              <>\r\n                {dayjs(data?.start_date).format('DD-MM-YYYY')} <br/> \r\n              </>\r\n            ): '--'}\r\n          </strong>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'completion_date',\r\n      header: 'Completion Date',\r\n      accessorKey: 'completion_date',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <strong>\r\n            {Number(data?.board_column_id) === 4 ? \r\n              data?.completion_date && (\r\n                <>\r\n                  {dayjs(data?.completion_date).format('DD-MM-YYYY')} <br/> \r\n                </>\r\n              ): '--'\r\n            } \r\n          </strong>\r\n        )\r\n      }\r\n    }, \r\n    \r\n    {\r\n      id: 'approved_on',\r\n      header: 'Approved On',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <strong> \r\n            {data?.task_approval_date ? (\r\n              <>\r\n                {dayjs(data?.task_approval_date).format('DD-MM-YYYY')}\r\n              </>\r\n            ): <span className='badge text-white word-break' style={{background: '#f5c308'}}>Not Completed Yet!</span>}\r\n          </strong>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'estimated_time',\r\n      header: 'Estimated Time',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <div>\r\n            {data?.estimate_hours ?? 0} hrs <br/>\r\n            {data?.estimate_minutes ?? 0} mins\r\n          </div>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'hours_logged',\r\n      header: 'Hours Logged',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <div>\r\n            {convertTime(data?.subtasks_hours_logged)}\r\n          </div>\r\n        )\r\n      }\r\n    }, \r\n    \r\n    {\r\n      id: 'assigned_by',\r\n      header: 'Assigned By',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        \r\n        return(\r\n          <Person\r\n            url={`/account/employees/${data?.added_by}` }\r\n            avatar={data?.added_by_avatar}\r\n            name={data?.added_by_name}\r\n          /> \r\n        )\r\n      }\r\n    },\r\n    {\r\n      id: 'assigned_to',\r\n      header: 'Assigned To',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return( \r\n          <Person\r\n            url={`/account/employees/${data?.assigned_to_id}` }\r\n            avatar={data?.assigned_to_avatar}\r\n            name={data?.assigned_to_name}\r\n          /> \r\n        )\r\n      }\r\n    },\r\n    {\r\n      id: 'status',\r\n      header: 'Task Status',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <span\r\n            className='badge text-white' \r\n            style={{background: data?.label_color}}\r\n          >\r\n            {data?.column_name}\r\n          </span>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'progress',\r\n      header: 'Progress',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        const count = Number(data?.subtasks_count);\r\n        const completed = Number(data?.subtasks_completed_count);\r\n        let bg = 'bg-transparent';\r\n        let percent = 0;\r\n\r\n        if(count > 0){percent = (completed / count) * 100;}\r\n        else{percent = Number(data?.board_column_id)=== 4 ? 100 : 0;}\r\n\r\n\r\n        if(percent === 100){\r\n          bg = 'bg-success'\r\n        }else if(percent < 100 && percent >= 75){\r\n          bg = 'bg-info';\r\n        }else if( percent < 75 && percent >= 25){\r\n          bg = 'bg-warning'\r\n        }else bg='bg-danger'\r\n\r\n\r\n        return(\r\n          <div>\r\n            <div className=\"progress\" style={{height: '16px'}}>\r\n                <div \r\n                  className={`progress-bar progress-bar-striped progress-bar-animated ${bg}`} \r\n                  role=\"progressbar\" \r\n                  style={{width: `${percent}%`}} \r\n                  aria-valuenow=\"10\" \r\n                  aria-valuemin=\"0\" \r\n                  aria-valuemax=\"100\"\r\n                >{Math.floor(percent)}%</div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    }, \r\n    {\r\n      id: 'report',\r\n      header: 'Report',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return <ReportButton row={data} />\r\n      }\r\n    },\r\n    {\r\n      id: 'action',\r\n      header: 'Action',\r\n      cell: ({row}) => {\r\n        const data = row?.original;\r\n        return(\r\n          <div>\r\n            <Dropdown>\r\n              <Dropdown.Toggle icon={false}>\r\n                <Button variant='tertiary'>\r\n                  <i className=\"fa-solid fa-ellipsis-vertical\"></i>\r\n                </Button>\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu className=\"p-1\">\r\n                <Dropdown.Item className=\"sp1_tasks_tbl_action\">\r\n                  <i className=\"fa-regular fa-pen-to-square mr-2\"></i>\r\n                  Edit\r\n                </Dropdown.Item>\r\n                <Dropdown.Item className=\"sp1_tasks_tbl_del\">\r\n                  <i className=\"fa-solid fa-trash-can mr-2\"></i>\r\n                  Delete\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </div>\r\n        )\r\n      }\r\n    },   \r\n  ])\r\n\r\n\r\n  // columns\r\n  const [columns, setColumns] = React.useState([...defaultColumns]);\r\n\r\n  React.useEffect(() => {\r\n    let auth = new User(window?.Laravel?.user);\r\n    let _cols = [...defaultColumns];\r\n\r\n    if(!_.includes(reportPermission, auth?.getRoleId())){\r\n      let cols = _cols?.filter(col => col.id !== 'report')\r\n      setColumns([...cols]);\r\n    }\r\n  }, [])\r\n\r\n  const [columnOrder, setColumnOrder] = React.useState(_.map(columns, 'id')); \r\n  \r\n  \r\n  // reset columns\r\n  const resetColumnsOrder = () => setColumnOrder(_.map(columns, 'id'))\r\n  const pagination = React.useMemo(() => ({pageIndex, pageSize}), [pageIndex, pageSize]);\r\n \r\n\r\n  // table instance...\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    state: {\r\n      sorting,\r\n      expanded,\r\n      columnOrder,\r\n      pagination,\r\n      tableName,\r\n      filter,\r\n      globalFilter:search\r\n    },\r\n    onGlobalFilterChange: setGlobalFilter,\r\n    autoResetPageIndex: !skipPageReset,\r\n    onPaginationChange: setPagination,\r\n    onSortingChange: setSorting,\r\n    onExpandedChange: setExpanded,\r\n    getSubRows: row => row.subtasks,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getExpandedRowModel: getExpandedRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    paginateExpandedRows: false,\r\n  })\r\n\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <div className='sp1_tasks_table_wrapper'>\r\n        <table className='sp1_tasks_table'>\r\n          <thead className=\"sp1_tasks_thead\">\r\n            {table.getHeaderGroups().map(headerGroup => (\r\n              <tr key={headerGroup.id} className='sp1_tasks_tr'>\r\n                {headerGroup.headers.map(header => {\r\n                  return <DragableColumnHeader key={header.id} header={header} table={table} /> \r\n                })}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody className='sp1_tasks_tbody'> \r\n            {!isLoading && table.getRowModel().rows.map(row => {\r\n              return (\r\n                <tr\r\n                  className={`sp1_tasks_tr ${row.parentId !== undefined ? 'expended_row' :''} ${row.getIsExpanded() ? 'expended_parent_row': ''}`}\r\n                    key={row.id}\r\n                  > \r\n                  {row.getVisibleCells().map(cell => { \r\n                    return (\r\n                      <td key={cell.id} className='px-2 sp1_tasks_td'>\r\n                        {flexRender(\r\n                          cell.column.columnDef.cell,\r\n                          cell.getContext()\r\n                        )} \r\n                      </td>\r\n                    )\r\n                  })}\r\n                </tr>\r\n              )\r\n            })}\r\n            {isLoading && <TaskTableLoader />}\r\n          </tbody>\r\n      </table>\r\n      \r\n      {!isLoading && _.size(table.getRowModel().rows) === 0  && <EmptyTable />}\r\n    </div>\r\n    \r\n\r\n      <TasksTablePagination \r\n        currentPage = {pageIndex + 1} \r\n        perpageRow= {pageSize}\r\n        onPageSize = {(size) => table.setPageSize(size)}\r\n        onPaginate = {(page) => table.setPageIndex(page - 1)}\r\n        totalEntry= {table.getPageCount() * pageSize}\r\n        onNext = {() => table.getCanNextPage() && table.nextPage()}\r\n        disableNext = {!table.getCanNextPage()}\r\n        onPrevious = {() => table.getCanPreviousPage() && table.previousPage()}\r\n        disablePrevious = {!table.getCanPreviousPage()}\r\n        totalPages = {table.getPageCount()}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n","import React, {useState, useEffect, useContext} from \"react\";\r\nimport Tabbar from \"../components/Tabbar\";\r\nimport SubTasksTable from \"../components/SubtaskTable\";\r\nimport FilterContainer from \"../components/Filter-bar/FilterContainer\";\r\nimport Filterbar from \"../components/Filter-bar/Filterbar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport SearchBox from \"../components/Searchbox\";\r\nimport { useLazyGetAllSubtaskQuery } from \"../../services/api/tasksApiSlice\";\r\nimport { storeSubTasks } from \"../../services/features/tasksSlice\";\r\n\r\nconst Subtasks = () => {\r\n    const {tasks} = useSelector(s => s.tasks)\r\n    const dispatch = useDispatch(); \r\n    const [filter, setFilter] = React.useState(null);\r\n    const [search,setSearch] = React.useState('');\r\n\r\n    const [getAllSubtask, {isFetching}] = useLazyGetAllSubtaskQuery();\r\n\r\n    const onFilter = (filter) => {\r\n        const queryObject = _.pickBy(filter, Boolean);\r\n        const queryString = new URLSearchParams(queryObject).toString();\r\n        setFilter(queryObject);\r\n\r\n\r\n        if(filter?.start_date && filter?.end_date){\r\n            getAllSubtask(`${queryString}`)\r\n            .unwrap()\r\n            .then(res => {\r\n                const data = _.orderBy(res?.tasks, 'due_date', 'desc');\r\n                dispatch(storeSubTasks({subtasks: data}))\r\n            })\r\n            .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <FilterContainer>\r\n                <Filterbar onFilter={onFilter} page=\"subtasks\"/> \r\n            </FilterContainer>\r\n            <div className=\"sp1_tlr_container\">\r\n                <div className=\"sp1_tlr_tbl_container\">\r\n                    <div className=\"mb-3 d-flex align-items-center flex-wrap justify-content-between\">\r\n                        <Tabbar/>\r\n                        <div style={{maxWidth: '300px'}}>\r\n                            <SearchBox value={search} onChange={setSearch} />\r\n                        </div>\r\n                    </div>\r\n                     \r\n                    <SubTasksTable \r\n                        isLoading={isFetching} \r\n                        filter={filter} \r\n                        tableName=\"tasksTable\"\r\n                        search={search}\r\n                        reportPermission = {[1,8,5]}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Subtasks;\r\n"],"names":["compareDate","CompareDate","SubTasksTable","_ref","isLoading","filter","tableName","search","reportPermission","subtasks","useSelector","s","tasks","_React$useState2","_slicedToArray","React","data","setData","_React$useState4","expanded","setExpanded","_React$useState6","sorting","setSorting","_React$useState8","pageIndex","pageSize","_React$useState8$","setPagination","_React$useState10","skipPageReset","setSkipPageReset","_React$useState12","setGlobalFilter","_tasks","_","defaultColumns","id","header","accessorFn","row","concat","heading","cell","_ref2","original","_jsx","title","style","textDecoration","children","className","gap","_jsxs","href","accessorKey","_ref3","count","subtasks_timer_active","subtaskCount","subtasks_count","isActive","serverTime","timer","start_time","end_time","dayjs","unix","clockIsRunning","color","undefined","parentId","fontSize","StopWatch","time","run","_ref4","milestone_title","_ref5","_data$deliverable_tit","deliverable_title","project_id","project_name","_ref6","_ref7","Person","url","client_id","avatar","client_avatar","name","client_name","_ref8","project_manager_id","pm_id_name","pm_id_avatar","_ref9","creation_date","_ref10","_date","date","due_date","currentDate","isSame","isAfter","format","_ref11","start_date","_Fragment","_ref12","Number","board_column_id","completion_date","_ref13","task_approval_date","background","_ref14","_data$estimate_hours","_data$estimate_minute","estimate_hours","estimate_minutes","_ref15","convertTime","subtasks_hours_logged","_ref16","added_by","added_by_avatar","added_by_name","_ref17","assigned_to_id","assigned_to_avatar","assigned_to_name","_ref18","label_color","column_name","_ref19","completed","subtasks_completed_count","bg","percent","height","role","width","Math","floor","_ref20","ReportButton","_ref21","Dropdown","icon","Button","variant","_React$useState14","_toConsumableArray","columns","setColumns","_window","_window$Laravel","auth","User","window","Laravel","user","_cols","getRoleId","cols","col","_React$useState16","columnOrder","setColumnOrder","pagination","table","useReactTable","state","globalFilter","onGlobalFilterChange","autoResetPageIndex","onPaginationChange","onSortingChange","onExpandedChange","getSubRows","onColumnOrderChange","getCoreRowModel","getPaginationRowModel","getFilteredRowModel","getExpandedRowModel","getSortedRowModel","paginateExpandedRows","getHeaderGroups","map","headerGroup","headers","DragableColumnHeader","getRowModel","rows","getIsExpanded","getVisibleCells","flexRender","column","columnDef","getContext","TaskTableLoader","EmptyTable","TasksTablePagination","currentPage","perpageRow","onPageSize","size","setPageSize","onPaginate","page","setPageIndex","totalEntry","getPageCount","onNext","getCanNextPage","nextPage","disableNext","onPrevious","getCanPreviousPage","previousPage","disablePrevious","totalPages","dispatch","useDispatch","setFilter","setSearch","_useLazyGetAllSubtask2","useLazyGetAllSubtaskQuery","getAllSubtask","isFetching","FilterContainer","Filterbar","onFilter","queryObject","pickBy","Boolean","queryString","URLSearchParams","toString","end_date","unwrap","then","res","orderBy","storeSubTasks","err","console","log","Tabbar","maxWidth","SearchBox","value","onChange"],"sourceRoot":""}